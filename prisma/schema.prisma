// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Plant {
    id             String       @id @default(cuid())
    name           String
    description    String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    definition     Definition[]
    frequency      Frequency[]
    Defect         Defect[]

    @@index([organizationId])
}

model Definition {
    id               String           @id @default(cuid())
    name             String
    description      String
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    plantId          String
    plant            Plant            @relation(fields: [plantId], references: [id])
    frequencyId      String
    frequency        Frequency        @relation(fields: [frequencyId], references: [id])
    definitionsTasks DefinitionTask[]

    @@index([plantId])
    @@index([frequencyId])
}

model DefinitionTask {
    id            String     @id @default(cuid())
    status        String
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    createdBy     String
    updatedBy     String
    availableFrom DateTime
    availableTo   DateTime
    frequencyId   String
    frequency     Frequency  @relation(fields: [frequencyId], references: [id])
    definitionId  String
    definition    Definition @relation(fields: [definitionId], references: [id])
    Defect        Defect[]

    @@index([definitionId])
    @@index([frequencyId])
}

model Frequency {
    id              String           @id @default(cuid())
    name            String
    description     String?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    plantId         String
    plant           Plant            @relation(fields: [plantId], references: [id])
    definitions     Definition[]
    definitionTasks DefinitionTask[]
    frequencyCrons  FrequencyCron[]

    @@index([plantId])
}

model FrequencyCron {
    id          String      @id @default(cuid())
    cron        String
    frequencies Frequency[]
}

model Defect {
    id               String         @id @default(cuid())
    description      String
    status           String
    dueDate          DateTime
    assignedTo       String
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    createdBy        String
    updatedBy        String
    plantId          String
    plant            Plant          @relation(fields: [plantId], references: [id])
    definitionTaskId String
    definitionTask   DefinitionTask @relation(fields: [definitionTaskId], references: [id])

    @@index([definitionTaskId])
    @@index([plantId])
}

model LinePlan {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    createdBy String
    updatedAt DateTime @updatedAt
    updatedBy String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    productionLine String
    actionPlans    ActionPlan[]
    assignedTo     String
    dueDate        DateTime
    status         String
    // attachments Attachment[]
    comment        String

    @@index([organizationId])
}

model ActionPlan {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    createdBy String
    updatedAt DateTime @updatedAt
    updatedBy String

    status      String
    name        String
    description String
    assignedTo  String
    dueDate     DateTime
    actions     Action[]
    LinePlan    LinePlan @relation(fields: [linePlanId], references: [id])
    linePlanId  String

    @@index([linePlanId])
}

model Action {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    createdBy String
    updatedAt DateTime @updatedAt
    updatedBy String

    name         String
    description  String
    startDate    DateTime
    dueDate      DateTime
    assignedTo   String
    priority     String
    status       String
    leader       String
    // attachments  Attachment[]
    comment      String
    ActionPlan   ActionPlan @relation(fields: [actionPlanId], references: [id])
    actionPlanId String

    @@index([actionPlanId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    memberships   Membership[]
    invitation    Invitation[]
}

model Organization {
    id          String       @id @default(cuid())
    name        String
    memberships Membership[]
    plants      Plant[]
    invitations Invitation[]
    linePlans    LinePlan[]
}

model Membership {
    id             String       @id @default(cuid())
    role           String
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    user           User         @relation(fields: [userId], references: [id])
    userId         String

    @@index([userId])
    @@index([organizationId])
}

model Invitation {
    id             String       @id @default(cuid())
    role           String
    status         String
    creatorId      String
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    user           User?        @relation(fields: [userId], references: [id])
    userId         String?

    @@index([userId])
    @@index([organizationId])
}
