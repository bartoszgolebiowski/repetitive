// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Workplace {
    id             String       @id @default(cuid())
    name           String
    description    String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    workflow       Workflow[]
    frequency      Frequency[]

    @@index([organizationId])
}

model Workflow {
    id            String         @id @default(cuid())
    name          String
    description   String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    workplaceId   String
    workplace     Workplace      @relation(fields: [workplaceId], references: [id])
    frequencyId   String
    frequency     Frequency      @relation(fields: [frequencyId], references: [id])
    workflowTasks WorkflowTask[]

    @@index([workplaceId])
    @@index([frequencyId])
}

model WorkflowTask {
    id            String    @id @default(cuid())
    status        String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    createdBy     String
    updatedBy     String
    availableFrom DateTime
    availableTo   DateTime
    frequencyId   String
    frequency     Frequency @relation(fields: [frequencyId], references: [id])
    workflowId    String
    workflow      Workflow  @relation(fields: [workflowId], references: [id])

    @@index([workflowId])
    @@index([frequencyId])
}

model Frequency {
    id             String          @id @default(cuid())
    name           String
    description    String?
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    workplaceId    String
    workplace      Workplace       @relation(fields: [workplaceId], references: [id])
    workflows      Workflow[]
    workflowTasks  WorkflowTask[]
    frequencyCrons FrequencyCron[]

    @@index([workplaceId])
}

model FrequencyCron {
    id          String      @id @default(cuid())
    cron        String
    frequencies Frequency[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    memberships   Membership[]
    invitation    Invitation[]
}

model Organization {
    id          String       @id @default(cuid())
    name        String
    memberships Membership[]
    workplaces  Workplace[]
    invitations Invitation[]
}

model Membership {
    id             String       @id @default(cuid())
    role           String
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    user           User         @relation(fields: [userId], references: [id])
    userId         String

    @@index([userId])
    @@index([organizationId])
}

model Invitation {
    id             String       @id @default(cuid())
    role           String
    status         String
    creatorId      String
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    user           User?        @relation(fields: [userId], references: [id])
    userId         String?

    @@index([userId])
    @@index([organizationId])
}
