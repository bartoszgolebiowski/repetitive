// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator kysely {
    provider     = "prisma-kysely"
    output       = "../src/server/db"
    fileName     = "types.ts"
    enumFileName = "enums.ts"
}

enum Status {
    IN_PROGRESS
    COMPLETED
    DELAYED
    REJECTED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

model LinePlan {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime @default(now())
    createdBy String
    updatedAt DateTime @updatedAt
    updatedBy String

    organizationId String
    productionLine String
    assignedTo     String
    dueDate        DateTime
    status         Status
    actionPlans    ActionPlan[]
}

model ActionPlan {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime @default(now())
    createdBy String
    updatedAt DateTime @updatedAt
    updatedBy String

    status      Status
    name        String
    description String
    assignedTo  String
    dueDate     DateTime

    actions    Action[]
    linePlan   LinePlan @relation(fields: [linePlanId], references: [id], onDelete: Cascade)
    linePlanId String
}

model Action {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime @default(now())
    createdBy String
    updatedAt DateTime @updatedAt
    updatedBy String

    name        String
    description String
    startDate   DateTime
    dueDate     DateTime
    assignedTo  String
    priority    Priority
    status      Status
    leader      String

    actionPlan   ActionPlan @relation(fields: [actionPlanId], references: [id], onDelete: Cascade)
    actionPlanId String
    comments     Comment[]
}

model Comment {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime @default(now())
    createdBy String
    comment   String

    action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
    actionId String
}

model Notification {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime @default(now())

    cause     String
    read      Boolean  @default(false)
    email     String
    variables String[]
}
